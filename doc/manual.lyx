#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\@ifundefined{definecolor} {\usepackage{color}}{}
\usepackage{multicol}\makeindex
\usepackage{xspace}
\end_preamble
\options fleqn
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
dd}{
\backslash
; 
\backslash
mathrm{d}} 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
Tr}{
\backslash
mathrm{Tr}} 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
bra}{< 
\backslash
! 
\backslash
!} 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
ket}{
\backslash
! 
\backslash
! >} 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
betan}{
\backslash
beta_N} 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
logn}{
\backslash
mathrm{ln}} 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
expon}{
\backslash
mathrm{exp}} 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
Imag}{
\backslash
mathrm{Im}}
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
wrappi}{{
\backslash
sc wrap-PI}
\backslash
xspace}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{titlepage}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace 5.5cm*
\end_inset


\end_layout

\begin_layout Standard
\align center

\size largest
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
A Python wrapper for Path Integral Molecular Dynamics
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset

 is a path integral molecular dynamics (PIMD) wrapper written in Python
 for ab initio density functional theory (DFT) codes.
 It currently works with the DFT codes QUANTUM ESPRESSO and CP2K, as well
 as the classical codes LAMMPS and DLPOLY.
\end_layout

\begin_layout Standard
It is designed to separate the calculation of the potential energy, forces
 and virial of a system from the algorithmic steps that propagate the dynamics.
 This allows the time intesive force calculation to be done by heavily optimised
 external codes while the dynamics and properties of interest can be calculated
 in the most transparent manner possible.
\end_layout

\begin_layout Standard
This manual will be in 5 parts, each with the following information: 
\end_layout

\begin_layout Itemize
In this chapter we discuss the functionality of the wrapper and the problems
 it is trying to solve.
 
\end_layout

\begin_layout Itemize
In the second chapter we will give instructions for the correct download,
 installation and running of the wrapper and specific driver codes.
 
\end_layout

\begin_layout Itemize
In the third chapter we explain the procedure for creating simulations with
 the appropriate features, and the form of the input and output files.
 
\end_layout

\begin_layout Itemize
In the fourth chapter the theory behind the algorithms used in the wrapper
 are discussed.
 
\end_layout

\begin_layout Itemize
In the final chapter we discuss some of the inner workings of the code to
 facilitate user modification of it.
 
\end_layout

\begin_layout Section
Shell variables
\end_layout

\begin_layout Standard
In all that follows, we will make use of the following definitions:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Definition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
src_dir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The directory in which the wrapper code has been installed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
np_dir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The directory in which the NumPy library has been installed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
np_dd_dir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The directory in which the NumPy tar file has been downloaded
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
driver_dir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The directory in which the driver code has been downloaded
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
np_vers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The version of NumPy installed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
py_vers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The version of Python installed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
esp_dd_dir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The directory in which the Quantum Espresso has been downloaded
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
esp_vers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The version of Quantum Espresso installed
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Driver compatibility
\end_layout

\begin_layout Standard
There are currently patches available for Quantum Espresso version 4.3.2,
 CP2K version 2.2, dlpoly version 2.16 and LAMMPS 14 Feb 2012.
 The next version of Quantum Espresso will have the patch as part of the
 main code.
\end_layout

\begin_layout Standard
None of these codes come with the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset

 package, and must be downloaded separately.
 See chapter 2 for more details of how to do this.
 
\end_layout

\begin_layout Section
Online resources
\end_layout

\begin_layout Standard
For more information about 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset

 and to download the source code go to [appropriate wrappi website].
\end_layout

\begin_layout Standard
To obtain the parameters needed to run Path Integral with Generalized Langevin
 Equation Thermostat (PIGLET) calculations, you can use the website: http://gle4
md.berlios.de/ 
\end_layout

\begin_layout Section
Credits
\end_layout

\begin_layout Section
Citing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset


\end_layout

\begin_layout Section
License
\end_layout

\begin_layout Chapter
Programming paradigm
\end_layout

\begin_layout Section
Structure of the code
\end_layout

\begin_layout Subsection
Directory structure
\end_layout

\begin_layout Standard
The code is separated into the following directory structure: 
\end_layout

\begin_layout Description
forces Contains a few stand-alone fortran modules for running particular
 simple tests without needing to download one of the driver libraries.
 
\end_layout

\begin_layout Description
doc Contains the documentation, including this manual.
 
\end_layout

\begin_layout Description
src Contains the source code for the wrapper.
 This is further subdivided into: 
\end_layout

\begin_deeper
\begin_layout Description
engine Holds the modules containing the internally used objects and algorithms
 
\end_layout

\begin_layout Description
forces Holds the modules containing the objects that deal with the driver
 communication and data transfer.
 
\end_layout

\begin_layout Description
utils Holds the modules containing the utility functions used in the other
 modules.
 
\end_layout

\end_deeper
\begin_layout Description
patches Contains the patch notes needed to allow the driver codes to interact
 with the wrapper.
 
\end_layout

\begin_layout Description
test Contains examples that can be used to make sure the build has been
 successful, show the correct form of the input files, and show some of
 the capabilities of the wrapper.
 
\end_layout

\begin_layout Subsection
Code structure
\end_layout

\begin_layout Standard
To run a simulation, the following steps are followed by the code:
\end_layout

\begin_layout Enumerate
The input file is read, parsed and interpreted.
\end_layout

\begin_layout Enumerate
The appropriate python objects are created and initialized.
\end_layout

\begin_layout Enumerate
A socket is opened, and the wrapper waits for a driver code to connect.
\end_layout

\begin_layout Enumerate
Once at least one driver code has connected, the simulation is run forward
 in discrete time steps.
\end_layout

\begin_layout Standard
Each time step splits up into the following stages:
\end_layout

\begin_layout Enumerate
The momenta of the particles are adjusted by an external thermostat, if
 applicable.
\end_layout

\begin_layout Enumerate
The momenta of the particles are adjusted according to the forces acting
 on them
\end_layout

\begin_layout Enumerate
The centroid coordinates of the ring polymers are adjusted according to
 their momenta (and in constant pressure simulations the cell momenta).
\end_layout

\begin_layout Enumerate
The internal modes of the ring polymer are adjusted according to their momenta.
\end_layout

\begin_layout Enumerate
The forces are recalculated by the driver code.
\end_layout

\begin_layout Enumerate
See step 2.
\end_layout

\begin_layout Enumerate
See step 1.
\end_layout

\begin_layout Subsection
Object Hierarchy
\end_layout

\begin_layout Standard
[Maybe insert a graphic here?]
\end_layout

\begin_layout Section
Dependency detection and automatic property caching
\end_layout

\begin_layout Section
Communication protocol
\end_layout

\begin_layout Chapter
Installing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Section
Background and nomenclature
\end_layout

\begin_layout Subsection
Molecular dynamics
\end_layout

\begin_layout Plain Layout
Molecular dynamics is a way of sampling the possible states of a system
 by propagating the positions and momenta of the particles in the system
 in discrete time steps according to a set of physical rules.
\end_layout

\begin_layout Plain Layout
By choosing the algorithm used to propagate the momenta correctly, the probabili
ty of the system being in a particular state will be the same as that of
 a physically realistic system, such as a system in contact with an external
 heat bath.
\end_layout

\begin_layout Plain Layout
We will call the complete set of possible states of the system an ensemble
 of states.
 The relevant ensembles we will be interested in are: 
\end_layout

\begin_layout Description
NVE ensemble This gives constant particle number, volume and energy, and
 corresponds to an isolated physical system.
 
\end_layout

\begin_layout Description
NVT ensemble This gives constant particle number, volume and temperature,
 and corresponds to a physical system in thermal equilibrium with a heat
 bath.
 
\end_layout

\begin_layout Description
NPT ensemble This gives constant particle number, pressure and temperature,
 and corresponds to a physical system in thermal equilibrium with a heat
 bath and in equilibrium with a pressure bath.
 
\end_layout

\begin_layout Plain Layout
We will call the total number of possible states of a system for any given
 set of external variables the partition function of that system.
\end_layout

\begin_layout Plain Layout
In any practical simulation, the number of atoms has to be far fewer than
 the typical number present in the physical system of interest, for reasons
 of computational difficulty.
 This means that a high proportion of the particles in the simulation are
 likely to be on the edge of the simulation box.
 To prevent this having a large effect on the properties of the system,
 all of the driver codes implement what is known as periodic boundary conditions.
 This***********************************************88 
\end_layout

\begin_layout Subsection
Path integral generalization
\end_layout

\begin_layout Plain Layout
In the path integral generalization of classical mechanics, we use the following
 isomorphism between the quantum partition function of a system and a classical
 partition function in a higher phase space: 
\begin_inset Formula 
\begin{equation}
Q=\Tr(e^{-\hat{H}\beta})
\end{equation}

\end_inset

 
\begin_inset Formula 
\begin{align}
 & Q=\lim_{N\to\infty}\prod_{i=1}^{N}\left[\int_{-\infty}^{\infty}\left(\frac{2\pi m}{h^{2}\betan}\right)^{\frac{3}{2}}e^{-\hat{U}_{N}\betan}\dd\textbf{r}_{i}\right]\\
 & \hat{U}_{N}=\sum_{i=1}^{N}\left[\frac{m}{2\betan^{2}\hbar^{2}}(\textbf{r}_{i}-\textbf{r}_{i-1})^{2}+\hat{V}_{i}\right]\\
 & \betan=\frac{\beta}{N}\nonumber 
\end{align}

\end_inset

 Where 
\begin_inset Formula \ensuremath{\hat{H}}

\end_inset

 is the quantum Hamiltonian of the system, which is the operator corresponding
 to the observable energy, 
\begin_inset Formula \ensuremath{\hat{V}_{i}}

\end_inset

 is the potential of the replica of the system corresponding to the label
 
\begin_inset Formula \ensuremath{i}

\end_inset

, and 
\begin_inset Formula \ensuremath{\hat{U}_{N}}

\end_inset

 is a classical configurational Hamiltonian in the extended phase space,
 which only depends on particle coordinates.
\end_layout

\begin_layout Plain Layout
In practice we do not need to go to the limit of infinite 
\begin_inset Formula \ensuremath{N}

\end_inset

, as convergence can often be achieved with a small increase of phase space.
 Note that this classical Hamiltonian is equivalent to that of a 
\begin_inset Formula \ensuremath{N}

\end_inset

 replicas of the original system, with a harmonic potential between adjacent
 replicas.
 We will call this set of replicas of each atom a ring polymer, and the
 component particles of this ring polymer beads.
\end_layout

\begin_layout Plain Layout
The last thing we must do to make the connection with molecular dynamics
 is to add fictitious ring polymer momenta to allow us to sample the phase
 space more effectively.
 In our code we make the choice corresponding to assigning each bead the
 mass of the corresponding atom: 
\begin_inset Formula 
\begin{align}
 & Q=\lim_{N\to\infty}\prod_{i=1}^{N}\left[\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}\left(\frac{1}{2\pi\hbar}\right)^{3}e^{-\hat{H}_{N}\betan}\dd\textbf{r}_{i}\dd\textbf{p}_{i}\right]\\
 & \hat{H}_{N}=\hat{U}_{N}+\sum_{i=1}^{N}\frac{\textbf{p}_{i}^{2}}{2m}
\end{align}

\end_inset


\end_layout

\begin_layout Plain Layout
This is then the partition function corresponding to the NVE ensemble for
 the quantum system, and as it has a purely classical Hamiltonian the algorithms
 used in classical dynamics and the generalizations used to sample other
 ensembles can be applied to this system in exactly the same way as for
 a classical system.
 
\end_layout

\begin_layout Subsection
Ab initio potentials
\end_layout

\begin_layout Plain Layout
An ab initio potential is one that does not require any experimentally derived
 parameters in its calculation.
 Under the strictest sense of the term many of the most popular DFT algorithms
 are not ab initio as they do use experimentally determined parameters,
 but as prior simulations are not necessary for the formulation of a DFT
 potential, we will define DFT as such for the purposes of this manual.
\end_layout

\begin_layout Plain Layout
DFT calculations are done by minimising an energy with respect to the one
 electron probability density, rather than the wavefunction as is common
 in most other ab initio potentials.
 The energy is given in terms of that of a fictitious system without electron
 interaction, for which the energy can be found exactly, plus an energy
 term due to electron correlation.
 This is the quantity of fundamental importance in DFT calculations, and
 while no analytic form for it exists several useful approximations to it
 have been created.
 We will call these correlation functionals.
\end_layout

\begin_layout Plain Layout
DFT calculations are done via an iterative procedure where a guess for the
 one electron wavefunctions are made so that the energy can be calculated,
 and a new set of one electron wavefunctions are then calculated by minimising
 this energy.
 The new wavefunctions are then put back into the first step and the procedure
 repeated until the initial and final density matrices are consistent.
\end_layout

\begin_layout Plain Layout
In what is known as Car-Parrinello molecular dynamics, the converged wavefunctio
ns of one step are then used as the starting point for the next step, drasticall
y accelerating the convergence.
\end_layout

\begin_layout Plain Layout
Another important consideration is the basis set used for the 
\end_layout

\end_inset


\end_layout

\begin_layout Section
System requirements
\end_layout

\begin_layout Standard
To install and run 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset

, you will need to have:
\end_layout

\begin_layout Itemize
A modern C compiler
\end_layout

\begin_layout Itemize
Python version 2.4 or later
\end_layout

\begin_layout Itemize
The Python array library NumPy
\end_layout

\begin_layout Standard
Additionally, most driver codes will have their own software requirements.
\end_layout

\begin_layout Section
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset

 download
\end_layout

\begin_layout Standard
A tar file can be downloaded from the website [appropriate wrap-pi website].
 To install this you need to input the following commands:
\end_layout

\begin_layout Itemize

\series bold
cd $src_dir
\end_layout

\begin_layout Itemize

\series bold
tar xf [wrapper_tar_file.tar]
\end_layout

\begin_layout Standard
You can also download the git repository at [github repository name] using
 the commands:
\end_layout

\begin_layout Itemize

\series bold
cd $src_dir
\end_layout

\begin_layout Itemize

\series bold
git clone [name of repository]
\end_layout

\begin_layout Section
NumPy download
\end_layout

\begin_layout Standard
Many clusters do not have NumPy already installed upon them.
 How NumPy can be installed depends on whether you have root access or not,
 and on the version of python you are using.
\end_layout

\begin_layout Standard
In any case you must first obtain the NumPy code using the following commands:
\end_layout

\begin_layout Itemize

\series bold
cd $np_dd_dir
\end_layout

\begin_layout Itemize

\series bold
tar czf $np_vers.tar.gz
\end_layout

\begin_layout Standard
You must now install this code.
 Note that this requires the distutils package that comes with the python-dev
 package.
 Assuming that the required software is installed, the NumPy package is
 built using:
\end_layout

\begin_layout Standard

\series bold
python setup.py build
\end_layout

\begin_layout Standard
The next step is to install the package.
 By default the download is to the directory /usr/local.
 This however is only accessible if you have root access.
 In this case all that needs to be done to finish the install is:
\end_layout

\begin_layout Standard

\series bold
python setup.py install
\end_layout

\begin_layout Standard
If you do not have root access, then the next step depends on which version
 of Python is beind used.
 With versions 2.6 or later there is a simple command to automatically download
 into the directory $HOME/local:
\end_layout

\begin_layout Standard

\series bold
python setup.py install --user
\end_layout

\begin_layout Standard
With Python 2.4/2.5 the process is a little more involved.
 First you must explicitly install the package in the directory of choice
 with the following command:
\end_layout

\begin_layout Standard

\series bold
python setup.py install --prefix=$np_dir
\end_layout

\begin_layout Standard
Next, you must tell python where to find this library, by appending to the
 linux environment variable 
\series bold
PYTHONPATH
\series default
:
\end_layout

\begin_layout Standard

\series bold
export PYTHONPATH=$PYTHONPATH:$np_dir/lib64/$py_vers/site-packages
\end_layout

\begin_layout Standard
You may have to replace lib64 with lib depending on whether you are installing
 to a 64-bit or 32-bit architecture.
\end_layout

\begin_layout Section
Driver installation and compilation
\end_layout

\begin_layout Subsection
Quantum Espresso
\end_layout

\begin_layout Standard
You can download the source code for Quantum Espresso at: www.quantum-espresso.org
/
\end_layout

\begin_layout Standard
For Quantum Espresso version 4.3.2, there is a patch file to allow it to be
 used as a driver code with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset

 in the directory $src_dir/patches/pwscf.
 This can be applied to the Quantum Espresso source code using:
\end_layout

\begin_layout Itemize

\series bold
cd $esp_dd_dir
\end_layout

\begin_layout Itemize

\series bold
tar zxvf $esp_vers.tar.gz
\end_layout

\begin_layout Itemize

\series bold
patch -p1 <
\series default
 
\series bold
$src_dir/patches/pwscf
\end_layout

\begin_layout Standard
After this, continue the download as per the instructions at www.quantum-espress.o
rg/.
\end_layout

\begin_layout Standard
Later versions of the code already have driver functionality, and so no
 patch needs to be applied before compiling.
\end_layout

\begin_layout Subsection
CP2K
\end_layout

\begin_layout Subsection
dlpoly
\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Chapter
Running 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset


\end_layout

\begin_layout Section
How to run 
\begin_inset ERT
status open

\begin_layout Plain Layout

/wrappi
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Command line interface
\end_layout

\begin_layout Standard
The best way to run 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset

 is via the command line.
 If the xml-formatted input file is called input_file.xml, then the command
 to do this is:
\end_layout

\begin_layout Standard

\series bold
python $src_dir/main.py input_file.xml
\end_layout

\begin_layout Standard
This is the recommended way of initializing 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
wrappi
\end_layout

\end_inset

, as it is both the simplest, and the easiest to script for lots of similar
 runs with different parameters.
\end_layout

\begin_layout Subsection
Python interface
\end_layout

\begin_layout Standard
It is also possible to run 
\begin_inset ERT
status open

\begin_layout Plain Layout

/wrappi
\end_layout

\end_inset

 from inside a Python script.
 This can be done via the following code:
\end_layout

\begin_layout Standard

\series bold
from main import *
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{0.5 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
main (
\begin_inset Quotes eld
\end_inset

input_file.xml
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Section
Input files
\end_layout

\begin_layout Subsection
xml file
\end_layout

\begin_layout Standard
This is the main input file from which the simulation parameters are initialized.
 The standard xml format is a set of hierarchially nested tags, each with
 a start tag, which may or may not have an attribute parameter, some contained
 data, which may or may not contain other tags, and a closing tag.
 The syntax required is:
\end_layout

\begin_layout Standard

\series bold
<tag_name attribute_name='attribute_data'>tag_data</tag_name>
\end_layout

\begin_layout Standard
The code uses this hierarchial structure to help read the data; if a particular
 object is held within a parent object in the code, then the tag for that
 object will be within the appropriate parent tags.
 In this manner, the entire class structure needed for the simulation can
 be constructed iteratively; the data between the two tags is assumed to
 correspond to data held within the object given by the tag name, which
 may have more tags corresponding to other child objects, so data held within
 those tags are assumed to correspond to data held within the child objects,
 and so on until all the data has been read.
\end_layout

\begin_layout Standard
To help detect any user error the acceptable tag names, type of data and
 possible default values are all specified in the code, in a specialized
 restart class for each class of object.
 More information on how the xml file is read can be found in Chapter 6.
\end_layout

\begin_layout Subsection
Configuration file
\end_layout

\begin_layout Standard
The initial configuration data can be initialized both through the xml file,
 and through a separate configuration file.
 The configuration file is specified using the from_file tag name in the
 xml file, with the tag name simply giving the file name of the configuration
 file.
 The currently accepted file formats are:
\end_layout

\begin_layout Itemize
pdb
\end_layout

\begin_layout Standard
These files can be used to specify the initial centroid positions, cell
 parameters and atom identities.
 The code will then try to assign masses to the atoms based on their atomic
 symbol, and an appropriate cell 
\begin_inset Quotes eld
\end_inset

mass
\begin_inset Quotes erd
\end_inset

 for use in constant pressure simulations.
 Any of this data can be overwritten by the xml file by using the appropriate
 tag names and data.
\end_layout

\begin_layout Subsection
Internal units
\end_layout

\begin_layout Section
Driver input
\end_layout

\begin_layout Subsection
Quantum Espresso
\end_layout

\begin_layout Subsection
dlpoly
\end_layout

\begin_layout Section
Restart mechanism
\end_layout

\begin_layout Subsection
Restart file
\end_layout

\begin_layout Subsection
Soft exit
\end_layout

\begin_layout Standard
To stop the program in such a way that it makes sure to save the data generated
 in a restart file, simply create a file 
\begin_inset Quotes eld
\end_inset

EXIT
\begin_inset Quotes erd
\end_inset

 in the directory in which you are running the code.
\end_layout

\begin_layout Section
Output files
\end_layout

\begin_layout Subsection
Property file
\end_layout

\begin_layout Subsection
Trajectory file
\end_layout

\begin_layout Chapter
Algorithms
\end_layout

\begin_layout Section
Integrators
\end_layout

\begin_layout Subsection
Trotter decomposition
\end_layout

\begin_layout Subsection
Ring polymer normal mode coordinates
\end_layout

\begin_layout Subsection
Constant temperature simulations
\end_layout

\begin_layout Subsection
Constant pressure simulations
\end_layout

\begin_layout Section
Output
\end_layout

\begin_layout Subsection
Estimator theory
\end_layout

\begin_layout Chapter
Developer's tips
\end_layout

\begin_layout Section
Dependancy class
\end_layout

\begin_layout Subsection
Dependancy graph
\end_layout

\begin_layout Section
Class hierarchy
\end_layout

\begin_layout Section
Output customization
\end_layout

\begin_layout Section
xml parsing
\end_layout

\begin_layout Subsection
Sockets
\end_layout

\begin_layout Section
Interface
\end_layout

\end_body
\end_document
