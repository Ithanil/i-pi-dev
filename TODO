A list of things that should be fixed or improved
Format of "bug-reports":

PRIORITY  Title of bug (REPORTER) (ASSIGNEE)
Longer description....

PRIORITY:
*    Can wait
**   Should be done before release
***  High priority
**** Code broken! Must fix now!
The person who "reports" a bug should indicate his initials in the title.
If one decides to actively work on one issue, it should indicate it on the title line.


DONE **   Clean up help (MC) (JM)
New dynamic attributes should be properly included in the documentation. 

DONE **   Clean up help (MC) (JM)
The whole input generation method should be documented with comments in the code.

**   Clean up help (MC)
The whole input generation method should be bug-checked.

DONE **   Robust input defaults (MC) (JM)
In many places the default value of a storage class is set by defining 
fields = { "tag" : ( Class, { "default" : EngineClass(default paramenters) } ) }
This is bad, because the class is generated at parse time, and 
just one default object will be returned by any instance of the 
container Input class. 
Defaults which are not immutable (strings, ints or floats) should be defined by
overloading the __init__ class and calling the parent class with the appropriate default, e.g.
InputSimulation.__init__(self, .... default=None, ....):
   if (default is None): default=WhateverClass(parameters)
   super(InputSimulation,self).__init__(..... default=default ...)

DONE **** Make the new NM thing actually work (MC) (MC)

DONE ***  Move the synchro business out of Beads and into NormalModes (MC) (MC)

**   Fix (or remove) "springs" trajectory output. Not really needed anymore... (MC)

** More in general, rationalize and clean up the available properties and trajectories. (MC)

** We should add a check function to InputThermo (JM)

***  Benchmark the new property implementation. (MC)
Completely revamped properties and trajectories scheme. 
Now it is possible to specify units and a short help string.

DONE * Multiforce object should be implemented. (JM) (JM)

** Find out why NPT and NST ensembles both appear to give jumps in the 
conserved quantity (JM)
I have made some progress with this. I got it to stop and go back one step 
and print a restart file whenever there was a jump. Restarting from this file
did not reproduce the jump, suggesting that there was a problem with the 
neighbour lists, not the wrapper.
I then made it redo the neighbour list at each time step. This appeared to 
reduce the frequency and magnitude of the energy jumps, but not eliminate them.
The effect is much larger with a NST than with a NPT ensemble, in fact the 
jumps appear to be very rare with the NPT ensemble.

* Figure out how to use FFTW with python for the normal-mode 
transformations. (JM)

DONE ** Add help strings to all the trajectories and properties in the property
list (JM) (JM)

DONE *** Take care that all the arguments for the properties, are being converted to the correct type. (JM) (JM)
I'm pretty sure that at the moment we're using strings as index variables 
rather than integers.

* It might be useful to have some kind of standardized error message format
(JM) (JM)

DONE ** In both engine and inputs directories, we need to document initializer, 
normalmodes, forces and outputs (JM) (JM)

*** Rework the cell class, and the NPT ensemble (JM)

DONE ** Add property and trajectory help string to the manual (JM) (JM)

*** Re-write the input files for all the test directories. (JM)
