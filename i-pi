#!/usr/bin/python

"""Main script from which the simulation is run.

Deals with creation of the simulation object, reading the input file and
initialising the system.

Run using:
      i-pi input_file.xml

Where 'input_file.xml' should be replaced by the name of the xml input file from
which the system data will be read. For a description of how the input file
should be formatted, see the reference manual.

Functions:
   main: Runs the simulation.
"""

import sys
import time

from ipi.utils.softexit import softexit
from ipi.utils.messages import banner, verbosity
from ipi.utils.load_simulation import load_simulation
from ipi.utils.messages import help


def main(file_name, do_yappi):
   """Loads and runs the simulation."""

   # construct simulation based on input file
   simulation = load_simulation(file_name)

   # Here we must do this manually
   # From here on everything should be automated by the messages classes.
   # TODO:
   # This is now in the wrong order - if there is output from the
   # simulation construction, it comes before the banner :-/
   # Solution: handle verbosity globally only and do this printing in
   # load_simulation, with the option to supress it by first decreasing
   # verbosity.
   if verbosity > 0:
      banner()
      print " # i-pi starting from input file: ", file_name
   if verbosity > 1:
      print " --- begin input file content --- "
      ifile = open(file_name,"r")
      for line in ifile.readlines():
         print line,
      ifile.close()
      print " ---  end input file content  --- "

   # optionally profile this run
   if do_yappi:
      import yappi
      yappi.start(builtins=True, profile_threads=True)

   # run the simulation
   start = time.time()
   simulation.run()
   if verbosity > 0:
      print "Total elapsed time: ", time.time() - start

   # optionally profile this run
   if do_yappi:
      yappi.stop()
      yappi.get_thread_stats().print_all()
      yfs = yappi.get_func_stats()
      yfs.save("profile.kgrind", type="callgrind")
      ypo = open("profile.yappi", "w")
      yfs.print_all(out=ypo)

   softexit.trigger(" @ SIMULATION: Exiting cleanly.")

   # TODO: Is there any point doing this, especially after soft exit?
   del simulation


if __name__ == '__main__':

   # TODO
   # use argparse instead of argv, will also handle help text
   # read yappi preference from arguments
   # Or do we want to support Python < 2.7?

   if (len(sys.argv) != 2):
      help()
   else:
      do_yappi = False
      main(sys.argv[1], do_yappi)
