#!/usr/bin/python

"""Main script from which the simulation is run.

Deals with creation of the simulation object, reading the input file,
initialising the system and running the simulation.

Run using:
      i-pi input_file.xml

Where 'input_file.xml' should be replaced by the name of the xml input file from
which the system data will be read. For a description of how the input file
should be formatted, see the reference manual.
"""

import sys

import ipi.inputs.simulation as isimulation
from ipi.utils.softexit import softexit
from ipi.utils.io.io_xml import *
from ipi.utils.messages import banner, help, verbosity
# import yappi, time


if (len(sys.argv) != 2):
   help()
   sys.exit()
else:
   file_name = sys.argv[1]

ifile = open(file_name,"r")
xmlrestart = xml_parse_file(ifile) # Parses the file.
ifile.close()

simrestart = isimulation.InputSimulation()
# Checks the input and partitions it appropriately.
simrestart.parse(xmlrestart.fields[0][1])
# Here we must do this manually; from here on everything should be automated by the messages classes
if simrestart.verbosity.fetch() != "quiet" :
   banner()
   print " # i-pi starting from input file: ", file_name
if simrestart.verbosity.fetch() != "quiet" and simrestart.verbosity.fetch() != "low" :
   print " --- begin input file content --- "
   ifile = open(file_name,"r")
   for line in ifile.readlines():
      print line,
   ifile.close()
   print " ---  end input file content  --- "

simul = simrestart.fetch() # Creates the appropriate simulation object.
# this does all of the piping between the components of the simulation
simul.bind()

#yappi.start(builtins=True,profile_threads=True)
#start=time.time()

simul.run()

#yappi.stop()
#yappi.get_thread_stats().print_all()
#yfs=yappi.get_func_stats()
#yfs.save("profile.kgrind", type="callgrind")
#ypo=open("profile.yappi","w")
#yfs.print_all(out=ypo)
#print "Total elapsed time: ", time.time()-start

softexit.trigger(" @ SIMULATION: Exiting cleanly.")
